"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createLaunchTemplate = void 0;
const aws_ec2_1 = require("aws-cdk-lib/aws-ec2");
const fs = require("fs");
const aws_ecs_1 = require("aws-cdk-lib/aws-ecs");
const constants_1 = require("../../../constants");
const createLaunchTemplate = (scope, props) => {
    const machineImage = getMachineImage(props);
    const userData = getStartupScript(props);
    const launchTemplate = new aws_ec2_1.LaunchTemplate(scope, 'Ec2LaunchTemplate', {
        instanceType: new aws_ec2_1.InstanceType('t3.micro'),
        // Amazon Linux 2 ECS optimized Images
        role: props.role,
        keyName: constants_1.GLOBAL_SSH_KEY_NAME,
        securityGroup: props.ecsSecurityGroup,
        detailedMonitoring: false,
        machineImage,
        userData,
        ...props.overrides,
    });
    return launchTemplate;
};
exports.createLaunchTemplate = createLaunchTemplate;
const getMachineImage = (props) => {
    // If a clustername is given, we know we are going to be using ECS.
    // Thus, we want to use an image optimized for ECS
    if (props.ecsClusterName)
        return aws_ecs_1.EcsOptimizedImage.amazonLinux2();
    return aws_ec2_1.MachineImage.latestAmazonLinux();
};
const getStartupScript = (props) => {
    // The userData attributes just wants a string of bash commands
    // so we need to encode the file.  This is how we do that.
    const baseStartupScript = fs.readFileSync(props.startupShellScriptPath, 'utf8');
    // If no ECS clustername is given, just return the regular startup script
    if (!props.ecsClusterName)
        return aws_ec2_1.UserData.custom(baseStartupScript);
    // If we do have an ECS clustername, we need to inject it into a config file
    // during startup.  If we don't do this, then ECS cluster will have no idea it exists
    const addToEcsClusterScript = `echo ECS_CLUSTER=${props.ecsClusterName} >> /etc/ecs/ecs.config`;
    // since the startup script is just a string, we can inject another command into it
    return aws_ec2_1.UserData.custom(baseStartupScript + addToEcsClusterScript);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF1bmNoLXRlbXBsYXRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibGF1bmNoLXRlbXBsYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLGlEQVE0QjtBQUM1Qix5QkFBd0I7QUFDeEIsaURBQXVEO0FBSXZELGtEQUF3RDtBQW1DakQsTUFBTSxvQkFBb0IsR0FBRyxDQUFDLEtBQWdCLEVBQUUsS0FBWSxFQUFFLEVBQUU7SUFDckUsTUFBTSxZQUFZLEdBQUcsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBQzNDLE1BQU0sUUFBUSxHQUFHLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFBO0lBQ3hDLE1BQU0sY0FBYyxHQUFHLElBQUksd0JBQWMsQ0FBQyxLQUFLLEVBQUUsbUJBQW1CLEVBQUU7UUFDcEUsWUFBWSxFQUFFLElBQUksc0JBQVksQ0FBQyxVQUFVLENBQUM7UUFDMUMsc0NBQXNDO1FBQ3RDLElBQUksRUFBRSxLQUFLLENBQUMsSUFBSTtRQUNoQixPQUFPLEVBQUUsK0JBQW1CO1FBQzVCLGFBQWEsRUFBRSxLQUFLLENBQUMsZ0JBQWdCO1FBQ3JDLGtCQUFrQixFQUFFLEtBQUs7UUFDekIsWUFBWTtRQUNaLFFBQVE7UUFDUixHQUFHLEtBQUssQ0FBQyxTQUFTO0tBQ25CLENBQUMsQ0FBQTtJQUVGLE9BQU8sY0FBYyxDQUFBO0FBQ3ZCLENBQUMsQ0FBQTtBQWhCWSxRQUFBLG9CQUFvQix3QkFnQmhDO0FBRUQsTUFBTSxlQUFlLEdBQUcsQ0FBQyxLQUFZLEVBQUUsRUFBRTtJQUN2QyxtRUFBbUU7SUFDbkUsa0RBQWtEO0lBQ2xELElBQUksS0FBSyxDQUFDLGNBQWM7UUFBRSxPQUFPLDJCQUFpQixDQUFDLFlBQVksRUFBRSxDQUFBO0lBRWpFLE9BQU8sc0JBQVksQ0FBQyxpQkFBaUIsRUFBRSxDQUFBO0FBQ3pDLENBQUMsQ0FBQTtBQUVELE1BQU0sZ0JBQWdCLEdBQUcsQ0FBQyxLQUFZLEVBQUUsRUFBRTtJQUN4QywrREFBK0Q7SUFDL0QsMERBQTBEO0lBQzFELE1BQU0saUJBQWlCLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FDdkMsS0FBSyxDQUFDLHNCQUFzQixFQUM1QixNQUFNLENBQ1AsQ0FBQTtJQUVELHlFQUF5RTtJQUN6RSxJQUFJLENBQUMsS0FBSyxDQUFDLGNBQWM7UUFBRSxPQUFPLGtCQUFRLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLENBQUE7SUFFcEUsNEVBQTRFO0lBQzVFLHFGQUFxRjtJQUNyRixNQUFNLHFCQUFxQixHQUFHLG9CQUFvQixLQUFLLENBQUMsY0FBYyx5QkFBeUIsQ0FBQTtJQUUvRixtRkFBbUY7SUFDbkYsT0FBTyxrQkFBUSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsR0FBRyxxQkFBcUIsQ0FBQyxDQUFBO0FBQ25FLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEluc3RhbmNlVHlwZSxcbiAgTGF1bmNoVGVtcGxhdGUsXG4gIExhdW5jaFRlbXBsYXRlUHJvcHMsXG4gIE1hY2hpbmVJbWFnZSxcbiAgU2VjdXJpdHlHcm91cCxcbiAgVXNlckRhdGEsXG4gIFZwYyxcbn0gZnJvbSAnYXdzLWNkay1saWIvYXdzLWVjMidcbmltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzJ1xuaW1wb3J0IHsgRWNzT3B0aW1pemVkSW1hZ2UgfSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtZWNzJ1xuaW1wb3J0IHsgUm9sZSB9IGZyb20gJ2F3cy1jZGstbGliL2F3cy1pYW0nXG5pbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tICdjb25zdHJ1Y3RzJ1xuaW1wb3J0IHsgSW5zdGFuY2VUeXBlSWRlbnRpZmllciB9IGZyb20gJy4uLy4uLy4uL3R5cGVzL2luc3RhbmNlLXR5cGVzJ1xuaW1wb3J0IHsgR0xPQkFMX1NTSF9LRVlfTkFNRSB9IGZyb20gJy4uLy4uLy4uL2NvbnN0YW50cydcblxudHlwZSBQcm9wcyA9IHtcbiAgdnBjOiBWcGNcbiAgLyoqXG4gICAqIElmIHlvdSBhcmUgdXNpbmcgdGhpcyBsYXVuY2ggdGVtcGxhdGUgd2l0aCBFQ1MsIHlvdSBtdXN0IGluY2x1ZGUgdGhlIGNsdXN0ZXIgbmFtZS5cbiAgICogSWYgeW91IGRvbid0IGluY2x1ZGUgdGhpcyBuYW1lLCB5b3VyIHNoaXQgd29uJ3Qgd29yay4gWW91IGNhbiBnZXQgdGhlIG5hbWUgYnkgY2FsbGluZzpcbiAgIEBleGFtcGxlXG4gICBjb25zdCBjbHVzdGVyID0gbmV3IENsdXN0ZXIoKVxuICAgKmNsdXN0ZXJOYW1lID0gY2x1c3Rlci5jbHVzdGVyTmFtZVxuICAgKi9cbiAgZWNzQ2x1c3Rlck5hbWU/OiBzdHJpbmdcblxuICAvKipcbiAgICogVGhlIHNhbWUgc2VjdXJpdHkgZ3JvdXAgdGhhdCBpcyBkZWZpbmVkIGZvciB5b3VyIEVDUyBTZXJ2aWNlc1xuICAgKi9cbiAgZWNzU2VjdXJpdHlHcm91cDogU2VjdXJpdHlHcm91cFxuXG4gIC8qKlxuICAgKiBSZWdhcmRsZXNzIG9mIHRoaXMgaW5zdGFuY2VzIHB1cnBvc2UsIHlvdSB3aWxsIHByb2JhYmx5IG5lZWQgdG8gYWRkXG4gICAqIHNvbWUgcGVybWlzc2lvbnMgdG8gYWNjZXNzIG90aGVyIEFXUyByZXNvdXJjZXMuXG4gICAqL1xuICByb2xlOiBSb2xlXG5cbiAgaW5zdGFuY2VUeXBlOiBJbnN0YW5jZVR5cGVJZGVudGlmaWVyXG5cbiAgLyoqXG4gICAqIElmIHlvdSB3YW50IHRvIHJ1biBzb21lIHNoZWxsIGNvbW1hbmRzIHdoZW4gdGhlIGNvbnRhaW5lciBmaXJzdCBpbnN0YW50aWF0ZXNcbiAgICogeW91IGNhbiBkbyBzbyB3aXRoIGEgc2hlbGwgc2NyaXB0LiBUaGUgcGF0aCBnaXZlbiBtdXN0IGJlZ2luIGF0IHRoZSBkaXJlY3RvcnkgdGhhdCBjb250YWlucyBjZGsuanNvbiBmaWxlXG4gICAqL1xuICBzdGFydHVwU2hlbGxTY3JpcHRQYXRoOiBzdHJpbmdcblxuICBvdmVycmlkZXM/OiBMYXVuY2hUZW1wbGF0ZVByb3BzXG59XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVMYXVuY2hUZW1wbGF0ZSA9IChzY29wZTogQ29uc3RydWN0LCBwcm9wczogUHJvcHMpID0+IHtcbiAgY29uc3QgbWFjaGluZUltYWdlID0gZ2V0TWFjaGluZUltYWdlKHByb3BzKVxuICBjb25zdCB1c2VyRGF0YSA9IGdldFN0YXJ0dXBTY3JpcHQocHJvcHMpXG4gIGNvbnN0IGxhdW5jaFRlbXBsYXRlID0gbmV3IExhdW5jaFRlbXBsYXRlKHNjb3BlLCAnRWMyTGF1bmNoVGVtcGxhdGUnLCB7XG4gICAgaW5zdGFuY2VUeXBlOiBuZXcgSW5zdGFuY2VUeXBlKCd0My5taWNybycpLFxuICAgIC8vIEFtYXpvbiBMaW51eCAyIEVDUyBvcHRpbWl6ZWQgSW1hZ2VzXG4gICAgcm9sZTogcHJvcHMucm9sZSwgLy8gYWRkIHRoZSByb2xlIHdlIGNyZWF0ZWQgKG5lZWRzIGFjY2VzcyB0byBBV1MgU00pXG4gICAga2V5TmFtZTogR0xPQkFMX1NTSF9LRVlfTkFNRSxcbiAgICBzZWN1cml0eUdyb3VwOiBwcm9wcy5lY3NTZWN1cml0eUdyb3VwLCAvLyBXZSBuZWVkIHRvIHVzZSB0aGUgc2FtZSBzZWN1cml0eSBncm91cCBhcyB3ZSB1c2VkIGZvciBFQ1NcbiAgICBkZXRhaWxlZE1vbml0b3Jpbmc6IGZhbHNlLCAvLyBkZXRhaWxlZCBtb25pdG9yaW5nIHNlbmRzIG1ldHJpY3MgZXZlcnkgbWludXRlLCBpbnN0ZWFkIG9mIGV2ZXJ5IDUgbWludXRlcy4gRXZlcnkgbWludXRlIGNvc3RzICQkJCQgOihcbiAgICBtYWNoaW5lSW1hZ2UsXG4gICAgdXNlckRhdGEsXG4gICAgLi4ucHJvcHMub3ZlcnJpZGVzLFxuICB9KVxuXG4gIHJldHVybiBsYXVuY2hUZW1wbGF0ZVxufVxuXG5jb25zdCBnZXRNYWNoaW5lSW1hZ2UgPSAocHJvcHM6IFByb3BzKSA9PiB7XG4gIC8vIElmIGEgY2x1c3Rlcm5hbWUgaXMgZ2l2ZW4sIHdlIGtub3cgd2UgYXJlIGdvaW5nIHRvIGJlIHVzaW5nIEVDUy5cbiAgLy8gVGh1cywgd2Ugd2FudCB0byB1c2UgYW4gaW1hZ2Ugb3B0aW1pemVkIGZvciBFQ1NcbiAgaWYgKHByb3BzLmVjc0NsdXN0ZXJOYW1lKSByZXR1cm4gRWNzT3B0aW1pemVkSW1hZ2UuYW1hem9uTGludXgyKClcblxuICByZXR1cm4gTWFjaGluZUltYWdlLmxhdGVzdEFtYXpvbkxpbnV4KClcbn1cblxuY29uc3QgZ2V0U3RhcnR1cFNjcmlwdCA9IChwcm9wczogUHJvcHMpID0+IHtcbiAgLy8gVGhlIHVzZXJEYXRhIGF0dHJpYnV0ZXMganVzdCB3YW50cyBhIHN0cmluZyBvZiBiYXNoIGNvbW1hbmRzXG4gIC8vIHNvIHdlIG5lZWQgdG8gZW5jb2RlIHRoZSBmaWxlLiAgVGhpcyBpcyBob3cgd2UgZG8gdGhhdC5cbiAgY29uc3QgYmFzZVN0YXJ0dXBTY3JpcHQgPSBmcy5yZWFkRmlsZVN5bmMoXG4gICAgcHJvcHMuc3RhcnR1cFNoZWxsU2NyaXB0UGF0aCxcbiAgICAndXRmOCcsXG4gIClcblxuICAvLyBJZiBubyBFQ1MgY2x1c3Rlcm5hbWUgaXMgZ2l2ZW4sIGp1c3QgcmV0dXJuIHRoZSByZWd1bGFyIHN0YXJ0dXAgc2NyaXB0XG4gIGlmICghcHJvcHMuZWNzQ2x1c3Rlck5hbWUpIHJldHVybiBVc2VyRGF0YS5jdXN0b20oYmFzZVN0YXJ0dXBTY3JpcHQpXG5cbiAgLy8gSWYgd2UgZG8gaGF2ZSBhbiBFQ1MgY2x1c3Rlcm5hbWUsIHdlIG5lZWQgdG8gaW5qZWN0IGl0IGludG8gYSBjb25maWcgZmlsZVxuICAvLyBkdXJpbmcgc3RhcnR1cC4gIElmIHdlIGRvbid0IGRvIHRoaXMsIHRoZW4gRUNTIGNsdXN0ZXIgd2lsbCBoYXZlIG5vIGlkZWEgaXQgZXhpc3RzXG4gIGNvbnN0IGFkZFRvRWNzQ2x1c3RlclNjcmlwdCA9IGBlY2hvIEVDU19DTFVTVEVSPSR7cHJvcHMuZWNzQ2x1c3Rlck5hbWV9ID4+IC9ldGMvZWNzL2Vjcy5jb25maWdgXG5cbiAgLy8gc2luY2UgdGhlIHN0YXJ0dXAgc2NyaXB0IGlzIGp1c3QgYSBzdHJpbmcsIHdlIGNhbiBpbmplY3QgYW5vdGhlciBjb21tYW5kIGludG8gaXRcbiAgcmV0dXJuIFVzZXJEYXRhLmN1c3RvbShiYXNlU3RhcnR1cFNjcmlwdCArIGFkZFRvRWNzQ2x1c3RlclNjcmlwdClcbn1cbiJdfQ==