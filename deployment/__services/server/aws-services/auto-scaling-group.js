"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createAutoscalingGroup = void 0;
const aws_autoscaling_1 = require("aws-cdk-lib/aws-autoscaling");
const aws_ec2_1 = require("aws-cdk-lib/aws-ec2");
const launch_template_1 = require("./launch-template");
const createAutoscalingGroup = (scope, props) => {
    const { clusterName, vpc, securityGroup, role } = props;
    // This launchtemplate includes a clusterName, which optimizes it
    // for ECS.
    const launchTemplate = (0, launch_template_1.createLaunchTemplate)(scope, {
        ecsClusterName: clusterName,
        ecsSecurityGroup: securityGroup,
        startupShellScriptPath: 'scripts/template-startup.sh',
        role,
        vpc,
        instanceType: 't3.micro',
    });
    // Security Group is set based on the Launch Template
    const ecsEc2AutoscalingGroup = new aws_autoscaling_1.AutoScalingGroup(scope, `AutoscalingServers`, {
        vpc: props.vpc,
        launchTemplate,
        // we only want one instance in our cluster(to stay in free tier)
        minCapacity: 1,
        desiredCapacity: 1,
        maxCapacity: 1,
        // Container instances need access to communicate with the Amazon ECS service endpoint.
        vpcSubnets: { subnetType: aws_ec2_1.SubnetType.PUBLIC },
        ...props.overrides,
    });
    return { ecsEc2AutoscalingGroup, launchTemplate };
};
exports.createAutoscalingGroup = createAutoscalingGroup;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0by1zY2FsaW5nLWdyb3VwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXV0by1zY2FsaW5nLWdyb3VwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLGlFQUlvQztBQUNwQyxpREFBb0U7QUFJcEUsdURBQXdEO0FBRWpELE1BQU0sc0JBQXNCLEdBQUcsQ0FDcEMsS0FBZ0IsRUFDaEIsS0FPQyxFQUNELEVBQUU7SUFDRixNQUFNLEVBQUUsV0FBVyxFQUFFLEdBQUcsRUFBRSxhQUFhLEVBQUUsSUFBSSxFQUFFLEdBQUcsS0FBSyxDQUFBO0lBRXZELGlFQUFpRTtJQUNqRSxXQUFXO0lBQ1gsTUFBTSxjQUFjLEdBQUcsSUFBQSxzQ0FBb0IsRUFBQyxLQUFLLEVBQUU7UUFDakQsY0FBYyxFQUFFLFdBQVc7UUFDM0IsZ0JBQWdCLEVBQUUsYUFBYTtRQUMvQixzQkFBc0IsRUFBRSw2QkFBNkI7UUFDckQsSUFBSTtRQUNKLEdBQUc7UUFDSCxZQUFZLEVBQUUsVUFBVTtLQUN6QixDQUFDLENBQUE7SUFFRixxREFBcUQ7SUFDckQsTUFBTSxzQkFBc0IsR0FBRyxJQUFJLGtDQUFnQixDQUNqRCxLQUFLLEVBQ0wsb0JBQW9CLEVBQ3BCO1FBQ0UsR0FBRyxFQUFFLEtBQUssQ0FBQyxHQUFHO1FBQ2QsY0FBYztRQUNkLGlFQUFpRTtRQUNqRSxXQUFXLEVBQUUsQ0FBQztRQUNkLGVBQWUsRUFBRSxDQUFDO1FBQ2xCLFdBQVcsRUFBRSxDQUFDO1FBQ2QsdUZBQXVGO1FBQ3ZGLFVBQVUsRUFBRSxFQUFFLFVBQVUsRUFBRSxvQkFBVSxDQUFDLE1BQU0sRUFBRTtRQUM3QyxHQUFHLEtBQUssQ0FBQyxTQUFTO0tBQ25CLENBQ0YsQ0FBQTtJQUVELE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxjQUFjLEVBQUUsQ0FBQTtBQUNuRCxDQUFDLENBQUE7QUExQ1ksUUFBQSxzQkFBc0IsMEJBMENsQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEF1dG9TY2FsaW5nR3JvdXAsXG4gIEF1dG9TY2FsaW5nR3JvdXBQcm9wcyxcbiAgVXBkYXRlUG9saWN5LFxufSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtYXV0b3NjYWxpbmcnXG5pbXBvcnQgeyBTZWN1cml0eUdyb3VwLCBTdWJuZXRUeXBlLCBWcGMgfSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtZWMyJ1xuaW1wb3J0IHsgQ2x1c3RlciB9IGZyb20gJ2F3cy1jZGstbGliL2F3cy1lY3MnXG5pbXBvcnQgeyBSb2xlIH0gZnJvbSAnYXdzLWNkay1saWIvYXdzLWlhbSdcbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gJ2NvbnN0cnVjdHMnXG5pbXBvcnQgeyBjcmVhdGVMYXVuY2hUZW1wbGF0ZSB9IGZyb20gJy4vbGF1bmNoLXRlbXBsYXRlJ1xuXG5leHBvcnQgY29uc3QgY3JlYXRlQXV0b3NjYWxpbmdHcm91cCA9IChcbiAgc2NvcGU6IENvbnN0cnVjdCxcbiAgcHJvcHM6IHtcbiAgICBpZGVudGlmaWVyOiBzdHJpbmdcbiAgICBjbHVzdGVyTmFtZTogc3RyaW5nXG4gICAgdnBjOiBWcGNcbiAgICBzZWN1cml0eUdyb3VwOiBTZWN1cml0eUdyb3VwXG4gICAgcm9sZTogUm9sZVxuICAgIG92ZXJyaWRlcz86IEF1dG9TY2FsaW5nR3JvdXBQcm9wc1xuICB9LFxuKSA9PiB7XG4gIGNvbnN0IHsgY2x1c3Rlck5hbWUsIHZwYywgc2VjdXJpdHlHcm91cCwgcm9sZSB9ID0gcHJvcHNcblxuICAvLyBUaGlzIGxhdW5jaHRlbXBsYXRlIGluY2x1ZGVzIGEgY2x1c3Rlck5hbWUsIHdoaWNoIG9wdGltaXplcyBpdFxuICAvLyBmb3IgRUNTLlxuICBjb25zdCBsYXVuY2hUZW1wbGF0ZSA9IGNyZWF0ZUxhdW5jaFRlbXBsYXRlKHNjb3BlLCB7XG4gICAgZWNzQ2x1c3Rlck5hbWU6IGNsdXN0ZXJOYW1lLFxuICAgIGVjc1NlY3VyaXR5R3JvdXA6IHNlY3VyaXR5R3JvdXAsXG4gICAgc3RhcnR1cFNoZWxsU2NyaXB0UGF0aDogJ3NjcmlwdHMvdGVtcGxhdGUtc3RhcnR1cC5zaCcsXG4gICAgcm9sZSxcbiAgICB2cGMsXG4gICAgaW5zdGFuY2VUeXBlOiAndDMubWljcm8nLFxuICB9KVxuXG4gIC8vIFNlY3VyaXR5IEdyb3VwIGlzIHNldCBiYXNlZCBvbiB0aGUgTGF1bmNoIFRlbXBsYXRlXG4gIGNvbnN0IGVjc0VjMkF1dG9zY2FsaW5nR3JvdXAgPSBuZXcgQXV0b1NjYWxpbmdHcm91cChcbiAgICBzY29wZSxcbiAgICBgQXV0b3NjYWxpbmdTZXJ2ZXJzYCxcbiAgICB7XG4gICAgICB2cGM6IHByb3BzLnZwYyxcbiAgICAgIGxhdW5jaFRlbXBsYXRlLFxuICAgICAgLy8gd2Ugb25seSB3YW50IG9uZSBpbnN0YW5jZSBpbiBvdXIgY2x1c3Rlcih0byBzdGF5IGluIGZyZWUgdGllcilcbiAgICAgIG1pbkNhcGFjaXR5OiAxLCAvLyBNaW5pbXVtIGluc3RhbmNlcyB3ZSBjYW4gc2NhbGUgZnJvbVxuICAgICAgZGVzaXJlZENhcGFjaXR5OiAxLCAvLyBIb3cgbWFueSB3aWxsIGJlIHJ1bm5pbmcgYXQgYW55IGdpdmVuIHRpbWU/XG4gICAgICBtYXhDYXBhY2l0eTogMSwgLy8gQXNzdW1pbmcgaXQncyBuZWVkZWQsIHdoYXQgaXMgdGhlIG1heGltdW0gaW5zdGFuY2VzIHdlIGNhbiBzY2FsZSB0bz9cbiAgICAgIC8vIENvbnRhaW5lciBpbnN0YW5jZXMgbmVlZCBhY2Nlc3MgdG8gY29tbXVuaWNhdGUgd2l0aCB0aGUgQW1hem9uIEVDUyBzZXJ2aWNlIGVuZHBvaW50LlxuICAgICAgdnBjU3VibmV0czogeyBzdWJuZXRUeXBlOiBTdWJuZXRUeXBlLlBVQkxJQyB9LFxuICAgICAgLi4ucHJvcHMub3ZlcnJpZGVzLFxuICAgIH0sXG4gIClcblxuICByZXR1cm4geyBlY3NFYzJBdXRvc2NhbGluZ0dyb3VwLCBsYXVuY2hUZW1wbGF0ZSB9XG59XG4iXX0=