"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createSecurityGroup = void 0;
const aws_ec2_1 = require("aws-cdk-lib/aws-ec2");
const constants_1 = require("../../../constants");
const createSecurityGroup = (scope, props) => {
    var _a, _b;
    const internetPort = getInternetPort(props);
    const portType = getInternetPortType(props);
    const securityGroup = new aws_ec2_1.SecurityGroup(scope, props.identifier, {
        vpc: props.vpc,
        description: props.description,
        allowAllOutbound: false,
    });
    const allowAllRule = [
        aws_ec2_1.Peer.anyIpv4(),
        aws_ec2_1.Port.tcp(internetPort),
        `Allow ${portType} access from the public internet`,
    ];
    const allowAllVpcRule = [
        aws_ec2_1.Peer.ipv4(props.vpc.vpcCidrBlock),
        aws_ec2_1.Port.tcp(internetPort),
        `Allow ${portType} access from within this vpc`,
    ];
    if (typeof props.internetAccess === 'string') {
        if (props.internetAccess === 'allow-all-http' ||
            props.internetAccess === 'allow-all-https') {
            securityGroup.addEgressRule(...allowAllRule);
            securityGroup.addIngressRule(...allowAllRule);
        }
        if (props.internetAccess === 'allow-all-http-in-vpc' ||
            props.internetAccess === 'allow-all-https-in-vpc') {
            securityGroup.addEgressRule(...allowAllVpcRule);
            securityGroup.addIngressRule(...allowAllVpcRule);
        }
    }
    const { sshAccess } = props;
    if (typeof sshAccess === 'string') {
        Object.values(constants_1.DEVELOPERS).forEach((info) => {
            securityGroup.addIngressRule(aws_ec2_1.Peer.ipv4(info.ipAddress + '/32'), aws_ec2_1.Port.tcp(22), `Allow SSH access for an individual at network ${info.name}`);
        });
    }
    if (typeof sshAccess === 'object') {
        (_a = sshAccess === null || sshAccess === void 0 ? void 0 : sshAccess.allowedIpAddresses) === null || _a === void 0 ? void 0 : _a.forEach((ipAddress) => {
            securityGroup.addIngressRule(aws_ec2_1.Peer.ipv4(ipAddress + '/32'), aws_ec2_1.Port.tcp(22), `Allow SSH access for an individual at network ${ipAddress}`);
        });
        (_b = sshAccess === null || sshAccess === void 0 ? void 0 : sshAccess.allowedDevelopers) === null || _b === void 0 ? void 0 : _b.forEach((developer) => {
            const info = constants_1.DEVELOPERS[developer];
            securityGroup.addIngressRule(aws_ec2_1.Peer.ipv4(info.ipAddress + '/32'), aws_ec2_1.Port.tcp(22), `Allow SSH access for an individual at network ${info.name}`);
        });
    }
    return securityGroup;
};
exports.createSecurityGroup = createSecurityGroup;
const getInternetPort = ({ internetAccess }) => {
    if (typeof internetAccess === 'string') {
        return internetAccess.includes('https') ? 443 : 80;
    }
    return (internetAccess === null || internetAccess === void 0 ? void 0 : internetAccess.ssl) ? 443 : 80;
};
const getInternetPortType = ({ internetAccess }) => {
    if (!internetAccess)
        return 'http';
    if (typeof internetAccess === 'string')
        return 'http';
    return internetAccess.ssl ? 'https' : 'http';
};
//# sourceMappingURL=data:application/json;base64,